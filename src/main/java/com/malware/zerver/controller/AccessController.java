package com.malware.zerver.controller;

import com.malware.zerver.model.DeleteModel;
import com.malware.zerver.model.Shop;
import com.malware.zerver.model.User;
import com.malware.zerver.model.requestModel.RequestFromUser;
import com.malware.zerver.repository.ShopRepository;
import com.malware.zerver.repository.UserRepository;
import org.dom4j.rule.Mode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.error.ErrorController;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import java.util.List;

@Controller
public class AccessController implements ErrorController {

    @Autowired
    ShopRepository shopRepository;

    @Autowired
    UserRepository userRepository;

    @GetMapping("/403")
    String denied(Model model){
        model.addAttribute("msg", "SORRY! ACCESS DENIED");
        model.addAttribute("code", "403");
        return "access";
    }

    @GetMapping("/error")
    String error(Model model){
        model.addAttribute("msg", "SORRY! PAGE NOT FOUND");
        model.addAttribute("code", "404");
        return "access";
    }

    @GetMapping("/control")
    String cp(Model model){
        List<Shop> shops = shopRepository.findAll();
        model.addAttribute("shops", shops);
        return "cp";
    }

    @GetMapping("/admin")
    String admin(Model model){
        List<Shop> shops = shopRepository.findAll();
        model.addAttribute("shops", shops);
        return "admin";
    }

    @PostMapping("/delete")
    String del(DeleteModel deleteModel, Model model){
        List<User> users = userRepository.findAll();
        System.out.println("DELETE : " + deleteModel.getUid());
        userRepository.deleteByUid(deleteModel.getUid());
        model.addAttribute("userList", users);
        return "redirect:/control/"+deleteModel.getBranchId();
    }

    @PostMapping("/update")
    String updateUser(RequestFromUser updateModel, Model model){
        String validation = validate(updateModel);
        if(validation.equals("VALID")){
            userRepository.updateUserData(updateModel.getName(), updateModel.getContact(), updateModel.getUsername(), updateModel.getUid());
        }
        else{
            System.out.println("VALIDATION STATUS [UPDATE] : " + validation);
        }
        model.addAttribute("error", validation);
        return "redirect:/control/"+updateModel.getBranchId();
    }

    @GetMapping("/control/{branchId}")
    String controlBranch(@PathVariable("branchId") String branch, Model model){

        System.out.println("BRANCH: " + branch);
        List<User> users = userRepository.findByBranchId(branch);
        model.addAttribute("userList", users);
        return "userdetail";
    }

    String validate(RequestFromUser data){
        String username = data.getUsername();
        if(username == null  || data.getUsername().isEmpty()){
            return "INVALID_EMAIL";
        }

        else if(data.getName() == null || data.getName().isEmpty()) {
            return "INVALID_NAME";
        }

        else if(data.getContact() == null || data.getContact().isEmpty()) {
            return "INVALID_CONTACT";
        }
        return "VALID";
    }
}
