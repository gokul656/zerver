package com.malware.zerver.controller;

import com.malware.zerver.model.Foods;
import com.malware.zerver.model.FoodModel;
import com.malware.zerver.model.TableOrder;
import com.malware.zerver.repository.FoodRepository;
import com.malware.zerver.repository.TableRepository;
import com.malware.zerver.service.TableService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.*;

import static com.malware.zerver.ZerverApplication.getUniqueId;

@Controller
public class ProductController{

    @Autowired
    FoodRepository foodRepository;

    @Autowired
    TableRepository tableRepository;

    @Autowired
    TableService tableService;

    @RequestMapping("/signup")
    String signup(){
        return "redirect:/api/auth/signup";
    }

    @GetMapping({"/homepage", "/"})
    String homePage(Model model){

        if(foodRepository.findAll().size() == 0){
            populate();
        }

        HashSet<String> tables = tableService.getAllTable();
        List<TableOrder> tableOrders = tableRepository.findAll();
        ArrayList<Foods> foods = (ArrayList<Foods>) foodRepository.findAll();
        System.out.println(tableRepository.findByTableId("t1"));
        model.addAttribute("foodList", foods);
        model.addAttribute("ordersPerTable", tableOrders);
        model.addAttribute("tables", tables);
        return "homepage";
    }

    @GetMapping("/products/{table}")
    String products(@PathVariable("table") String tableid, Model model){

        int total;
        ArrayList<Foods> foods = (ArrayList<Foods>) foodRepository.findAll();
        List<TableOrder> tableOrders = tableRepository.findByTableId(tableid);

        total = tableOrders.stream().mapToInt(it -> it.getQty() * foodRepository.findFoodWithId(it.getProductId()).getPrice()).sum();
        tableOrders.forEach(
          it -> {
              foods.forEach(
                      food -> {
                          if(it.getProductId().equals(food.getProductId())){
                              food.setQty(it.getQty());
                          }
                      }
              );
          }
        );

        model.addAttribute("total", total);
        model.addAttribute("foodList", foods);
        model.addAttribute("id", tableid);

        return "table_detail";
    }

    @RequestMapping("/reset/{table}")
    String reset(@PathVariable("table") String tableid, Model model){
        tableService.resetTable(tableid);
        return "redirect:/homepage";
    }

    @PostMapping("/additem/{table}")
    String addItemToCart(@PathVariable("table") String tableId, @ModelAttribute FoodModel data){

        tableService.resetTable(tableId);
        String[] unParsed = data.getData().split(",");
        try {
            for (String i : unParsed) {
                System.out.println(i);
                String[] splitted = i.split("//");
                String key = i.split("//")[0];
                String value = "0";
                if(splitted.length > 1){
                    value = i.split("//")[1];
                }
                int qty = Integer.parseInt(value);
                
                if(qty != 0){

                    TableOrder order = tableService.findFid(tableId, key);

                    if(order == null){
                        TableOrder current = new TableOrder(tableId, key, qty);
                        tableService.saveData(current);
                    }
                    else{
                        TableOrder tableOrder = tableService.findOrder(order.getFid());
                        tableOrder.setQty(qty);
                        tableService.saveData(tableOrder);
                        System.out.printf("UPDATING : QTY %d FID : %d\n", qty, order.getFid());
                    }
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }
        return "redirect:/products/" + tableId;
    }

    @GetMapping("/test")
    ResponseEntity<?> some(){
        return ResponseEntity.ok().body("SOME DETAILS");
    }

    public void populate(){
        String randomId = getUniqueId();
        foodRepository.save(new Foods("Food_1", "Some description about Food_1", 75, 0, randomId));
        randomId = getUniqueId();
        foodRepository.save(new Foods("Food_2", "Some description about Food_2", 150, 0, randomId));
        randomId = getUniqueId();
        foodRepository.save(new Foods("Food_3", "Some description about Food_3", 40, 0, randomId));
        randomId = getUniqueId();
        foodRepository.save(new Foods("Food_4", "Some description about Food_4", 60, 0, randomId));
    }
}
