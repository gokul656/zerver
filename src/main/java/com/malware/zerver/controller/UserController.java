package com.malware.zerver.controller;

import com.malware.zerver.config.JwtTokenUtil;
import com.malware.zerver.exception.CustomException;
import com.malware.zerver.model.Role;
import com.malware.zerver.model.Shop;
import com.malware.zerver.model.User;
import com.malware.zerver.model.UserRole;
import com.malware.zerver.model.requestModel.RequestFromUser;
import com.malware.zerver.repository.RoleRepository;
import com.malware.zerver.repository.ShopRepository;
import com.malware.zerver.repository.UserRepository;
import com.malware.zerver.repository.UserRoleRepositoty;
import com.malware.zerver.service.UserDetailServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

import static com.malware.zerver.Constant.SIGNUP_SUCCESS;

@RequestMapping("/api/auth")
@Controller
public class UserController {

    @Autowired
    JwtTokenUtil tokenUtil;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    UserDetailServiceImpl userDetailService;

    @Autowired
    RoleRepository roleRepository;

    @Autowired
    UserRoleRepositoty userRoleRepositoty;

    @Autowired
    ShopRepository shopRepository;

    @GetMapping("/login")
    String login(Model model){
        return "login";
    }

    @PostMapping("/signup")
    String signUp(@ModelAttribute RequestFromUser user, Model model){

        String username = user.getUsername();
        List<Shop> branches = shopRepository.findAll();

        String validation = validate(user);

        if(!validation.equals("VALID")){
            model.addAttribute("error", validation);
            return "signup";
        }

        User currentUser = userRepository.findByEmail(username);
        if(currentUser != null) {
            model.addAttribute("branches", branches);
            model.addAttribute("error", "USERNAME_ALREADY_EXIST");
            return "signup";
        }

        if(user.getName() == null) {
            model.addAttribute("branches", branches);
            model.addAttribute("error", "USERNAME_CANNOT_BE_EMPTY");
            return "signup";
        }

        if(user.getContact().length() < 10) {
            model.addAttribute("branches", branches);
            model.addAttribute("error", "INVALID_PHONE_NUMBER");
            return "signup";
        }


        if(user.getBranch() == null){
            model.addAttribute("error", "INVALID_BRANCH_NAME");
            return "signup";
        }

        Shop branch = shopRepository.findByBranchName(user.getBranch());

        //Create new user
        User castedUser = new User(user.getUsername(), passwordEncoder.encode(user.getPassword()), branch.getBranchId(), user.getName(), "+91-" + user.getContact());
        castedUser.setUid(getUniqueId());
        castedUser.setEmail(user.getUsername());
        if(user.getUsername().contains("manager")){
            castedUser.setRole("MANAGER");
            Role role = new Role(user.getUsername(), castedUser.getRole(), branch.getBranchId());
            roleRepository.save(role);
        }
        else if(user.getUsername().contains("admin")){
            castedUser.setRole("ADMIN");
            Role role = new Role(user.getUsername(), castedUser.getRole(),null);
            roleRepository.save(role);
        }
        userRepository.save(castedUser);

        model.addAttribute("signupForm", new RequestFromUser());
        model.addAttribute("branches", branches);
        model.addAttribute("info", SIGNUP_SUCCESS);
        return "signup";
    }

    @GetMapping("/signup")
    String signUpPage(Model model){
        System.out.println("ROLES : " + userRoleRepositoty.findAll().size());
        if(userRoleRepositoty.findAll().size() == 0){
            System.out.println("Populating - ROLES");
            populateRoles();
        }

        String randomId = getUniqueId();
        if(userRepository.findAll().size() == 0){
            User user = new User("manager@zerveit.com", passwordEncoder.encode("gokul656"), null, "Manager", "9894292942");
            user.setRole("MANAGER");
            user.setUid(randomId);
            userRepository.saveAndFlush(user);
        }

        List<Shop> branches = shopRepository.findAll();
        if(branches.size() == 0){
            populateShop();
        }

        branches = shopRepository.findAll();
        model.addAttribute("branches", branches);
        return "signup";
    }


    @GetMapping("/users")
    String getAllUsers(Model model){
        if(userRepository.findAll().isEmpty()){
            throw new CustomException(CustomException.ErrorMessage.EMPTY_LIST);
        }
        List<User> users = userRepository.findAll();
        model.addAttribute("userList", users);
        return "userdetail";
    }

    String getUniqueId(){
        return UUID.randomUUID().toString();
    }

    public void populateShop(){
        String randomId = getUniqueId();
        shopRepository.save(new Shop("Eat-nd-run", "Cauvery Nagar", randomId));
        randomId = getUniqueId();
        shopRepository.save(new Shop("Eat-nd-run", "Bharathi Nagar", randomId));
        randomId = getUniqueId();
        shopRepository.save(new Shop("Eat-nd-run", "Mount Road", randomId));
    }

    void populateRoles(){
        String randomId = getUniqueId();
        userRoleRepositoty.save(new UserRole("MANAGER", randomId));
        randomId = getUniqueId();
        userRoleRepositoty.save(new UserRole("EMPLOYEE", randomId));
        randomId = getUniqueId();
        userRoleRepositoty.saveAndFlush(new UserRole("ADMIN", randomId));
    }

    String validate(RequestFromUser data){
        String username = data.getUsername();
        if(username == null){
            return "INVALID_USERNAME";
        }
        String password = data.getPassword();
        if(password == null || password.length() < 6){
            return "INVALID_PASSWORD";
        }

        else if(data.getName() == null) {
            return "INVALID_NAME";
        }

        else if(data.getContact() == null) {
            return "INVALID_CONTACT";
        }
        return "VALID";
    }

}
